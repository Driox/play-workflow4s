# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.http.secret.key = "changeme"

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages
  langs = [ "en", "fr"]

  # Whether the language cookie should be secure or not
  langCookieSecure = ${application.is_secure}

  # Whether the HTTP only attribute of the cookie should be set to true
  langCookieHttpOnly = true
}

## Play HTTP settings
# ~~~~~
play.http {
  ## Session & Flash
  # https://www.playframework.com/documentation/latest/JavaSessionFlash
  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
  # ~~~~~
  session {
    # Sets the cookie to be sent only over HTTPS.
    secure = ${application.is_secure}

    # Sets the cookie to be accessed only by the server.
    httpOnly = true

    # The value of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
    # Possible values are "lax" and "strict". If misconfigured it's set to null.
    # We want "None" but we need to have secure = true when we use "None" otherwise no cookie is sent
    # So in dev we disabled sameSite
    # sameSite = "None"

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    #maxAge = 300

    # Sets the domain on the session cookie.
    #domain = "example.com"

    cookieName = "play-workflow4s"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    secure = ${application.is_secure}

    # Sets the cookie to be accessed only by the server.
    httpOnly = true
  }

  forwarded {
    version = x-forwarded
    trustedProxies = ["0.0.0.0/0", "::/0"]
  }
}

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false

  enabled=true
  autoApply=true
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 10
    # See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
    hikaricp.minimumIdle      = 10
    hikaricp.maximumPoolSize  = 10
  }
}

################################################
## Pekko Cluster for Workflow4s
#
# Check https://github.com/business4s/workflows4s/blob/main/workflows4s-example/src/main/resources/application.conf
# or https://pekko.apache.org/docs/pekko/current/typed/cluster.html
pekko {
  actor {
    provider = "cluster"
  }
  persistence {
    journal.plugin = "jdbc-journal"
    # snapshot-store.plugin = "jdbc-snapshot-store"
    # state.plugin = "jdbc-durable-state-store"
  }

  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      port = 2551
    }
  }

  cluster {
    seed-nodes = ["pekko://application@127.0.0.1:2551"]
    auto-down-unreachable-after = 10s

    downing-provider-class = "org.apache.pekko.cluster.sbr.SplitBrainResolverProvider"
  }

  # actor {
  #   serializers {
  #     jackson-json = "org.apache.pekko.serialization.jackson.JacksonJsonSerializer"
  #     # jackson-cbor = "org.apache.pekko.serialization.jackson.JacksonCborSerializer"
  #     # proto = "org.apache.pekko.remote.serialization.ProtobufSerializer"
  #     # myown = "docs.serialization.MyOwnSerializer"
  #   }
  #   serialization-bindings {
  #     "operation.workflow.kyc.PekkoJsonSerializable" = jackson-json
  #   }
  # }
}

jdbc-journal.slick = ${slick}
jdbc-read-journal.slick = ${slick}

slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    url = "jdbc:postgresql://localhost/app-test-db"
    user = "app"
    password = "app"
    driver = "org.postgresql.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}
#
##
################################################

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  default.driver = org.postgresql.Driver
  default.url = "jdbc:postgresql://localhost/app-test-db"
  default.username = app
  default.password = "app"

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}

# db.prototype.hikaricp.maximumPoolSize=5

# Slick
# ~~~~~~
# slick.dbs.default.profile= "slick.jdbc.H2Profile$"
# slick.dbs.default.db.driver="org.h2.Driver"
# slick.dbs.default.db.url="jdbc:h2:mem:play;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=FALSE"
# slick.dbs.default.db.user=sa
# slick.dbs.default.db.password=""

slick.dbs.default.profile="models.dao.EnhancedPostgresDriver$"
slick.dbs.default.db.driver=org.postgresql.Driver
slick.dbs.default.db.url="jdbc:postgresql://localhost/app-test-db"
slick.dbs.default.db.user=app
slick.dbs.default.db.password="app"
slick.dbs.default.db.numThreads=20
slick.dbs.default.db.minConnections=10
slick.dbs.default.db.maxConnections=20
slick.dbs.default.db.connectionTimeout=5 seconds
slick.dbs.default.db.validationTimeout=5 seconds


# Application
# ~~~~~~
application.is_secure=false
application.host="localhost:9000"
application.environment="dev"
