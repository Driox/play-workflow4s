rules = [
  DisableSyntax
  NoAutoTupling
  ExplicitResultTypes
  LeakingImplicitClassVal
  NoValInForComprehension
  OrganizeImports
  ProcedureSyntax
  RedundantSyntax
  RemoveUnused
]

ExplicitResultTypes {
  memberKind = [Def, Val, Var]
  memberVisibility = [Public, Protected]
  skipSimpleDefinitions = ['Term.Ref', 'Lit', 'Term.New']
  fatalWarnings = false
  rewriteStructuralTypesToNamedSubclass = false
  onlyImplicits = true
}

OrganizeImports {
  targetDialect = Scala3
  blankLines = Auto
  coalesceToWildcardImportThreshold = 6
  expandRelative = true
  groupExplicitlyImportedImplicitsSeparately = false
  groupedImports = AggressiveMerge
  groups = [
    "*",
    "re:(javax?|scala)\\.",
    "io.",
    "org.",
    "com.",
    "zio."
  ]
  importSelectorsOrder = SymbolsFirst
  importsOrder = Ascii
  preset = DEFAULT
  removeUnused = true
}

RemoveUnused {
  imports = false
  privates = true
  locals = true
  patternvars = true
}

DisableSyntax.noVars = true
DisableSyntax.noThrows = true
DisableSyntax.noNulls = true
DisableSyntax.noReturns = true
DisableSyntax.noAsInstanceOf = false
DisableSyntax.noIsInstanceOf = true
DisableSyntax.noXml = true
DisableSyntax.noFinalize = true
DisableSyntax.noValPatterns = true
DisableSyntax.regex = [
  {
    id = illegalImports
    pattern = "import (sun\\..*|java\\.awt\\..*)"
    message = "You can't use internal or deprecated import like {$0}"
  }
  {
    id = noPrintln
    pattern = "println"
    message = "You should use a proper logger"
  }
  {
    id = noFutureSequence
    pattern = "Future\\.sequence\\("
    message = "You should not use Future.sequence as it's not safe. Use a stream instead"
  }
  {
    id = noAwaitResult
    pattern = "Await\\.result"
    message = "You should not use Await.result because it's blocking. Instead use Future and execution context"
  }
]
